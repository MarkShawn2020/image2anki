{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6c30d62c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image, ImageDraw, ImageFont"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a452885d",
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = '../data/images/7.jpg'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e95a4da",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "img = Image.open(img_path)\n",
    "plt.imshow(img)\n",
    "plt.interactive(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e4416bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import TypedDict\n",
    "from enum import Enum\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "class Period(TypedDict):\n",
    "    y_s: int\n",
    "    y_e: int\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ab13ee2",
   "metadata": {},
   "outputs": [],
   "source": [
    "img[:,180:185]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "35174681",
   "metadata": {},
   "outputs": [],
   "source": [
    "img.getdata([:,180:185])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8e6420ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "data[:,180:185]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "be84121a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b629ea2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b61f3e0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8a6f58ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "img = Image.open(img_path)\n",
    "plt.imshow(img)\n",
    "plt.interactive(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cf42cb9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a2593d4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:1850])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a1c883b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:200])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "92cef1bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "87a8eed7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:1805])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d7afbfc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:195])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cc45ce49",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:200])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "13ebf334",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e8643c81",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "123b8359",
   "metadata": {},
   "outputs": [],
   "source": [
    "%config InlineBackend.print_figure_kwargs={'facecolor' : \"r\"}\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ec20b427",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98ce77ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fbc04c39",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "65ac21ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6fdff8ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "490dcb3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f5070262",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=200\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8aace9d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=200\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2e4ed7d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inlin\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=200\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "95a6ce4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi']=200\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2e9c9441",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,160:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1c9c876a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,180:220])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "413dab6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(255 - data[:,180:185])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6c88f764",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = np.array(img)\n",
    "plt.imshow(data[:,180:185])\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "16934aa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "40094623",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.sum(axis=0)\n",
    "data.apply(handle_row, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "398c6c70",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.sum(axis=0)\n",
    "data.map(handle_row, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "32022c97",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.sum(axis=0)\n",
    "np.apply_along_axis(handle_row, 0, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7592a3b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0a10b435",
   "metadata": {},
   "outputs": [],
   "source": [
    "img.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8a838f6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "img.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0dd0ac4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "42faa6dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 0, data)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "57e50e15",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(row_colors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e80a8164",
   "metadata": {},
   "outputs": [],
   "source": [
    "for row in row_colors:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b734d85d",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.mean(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 0, data)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7fbeb03f",
   "metadata": {},
   "outputs": [],
   "source": [
    "for row in row_colors:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f21c214e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.mean(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "be83a0e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.mean(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f4b33811",
   "metadata": {},
   "outputs": [],
   "source": [
    "for row in row_colors:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2f61d402",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row):\n",
    "    return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "0ddc3606",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "622a565c",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f8fced49",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "287caa38",
   "metadata": {},
   "outputs": [],
   "source": [
    "for row in row_colors:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a0617853",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 255 - np.array(img)\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bb5213e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "for row in row_colors:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6ed80c6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        periods.append((i, ))\n",
    "        is_empty = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods[-1][1] = i\n",
    "        is_empty = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "17cf4f67",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        periods.append((i, 0))\n",
    "        is_empty = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods[-1][1] = i\n",
    "        is_empty = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "031da102",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        periods.append((i, 0))\n",
    "        is_white = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods[-1][1] = i\n",
    "        is_white = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "5dcd8346",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "start = 0\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        start = i\n",
    "        is_white = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods[-1][1] = (start, i)\n",
    "        is_white = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "222eb83e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "start = 0\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        start = i\n",
    "        is_white = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods.append((start, i))\n",
    "        is_white = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5b07bda6",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "# print(row_colors.shape)\n",
    "row_colors\n",
    "periods = []\n",
    "start = 0\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        start = i\n",
    "        is_white = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods.append((start, i))\n",
    "        is_white = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "df37a211",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import TypedDict\n",
    "from enum import Enum\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "class BasePeriod(TypedDict):\n",
    "    y_s: int\n",
    "    y_e: int\n",
    "\n",
    "class Period(BasePeriod):\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "78611240",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import TypedDict, List\n",
    "from enum import Enum\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "class BasePeriod(TypedDict):\n",
    "    y_s: int\n",
    "    y_e: int\n",
    "\n",
    "class Period(BasePeriod):\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "c3f95e2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import TypedDict, List, Tuple\n",
    "from enum import Enum\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "class BasePeriod(TypedDict):\n",
    "    value: Tuple[int]\n",
    "\n",
    "class Period(BasePeriod):\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5e86ba15",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "data = 1 - np.array(img.convert('1'))\n",
    "def handle_row(row): return row.sum(axis=0)\n",
    "row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "# print(row_colors.shape)\n",
    "row_colors\n",
    "periods: List[BasePeriod] = []\n",
    "start = 0\n",
    "is_white = True\n",
    "# [i, j)\n",
    "for i, j in enumerate(row_colors):\n",
    "    if j > 0 and is_white:\n",
    "        start = i\n",
    "        is_white = False\n",
    "    elif j == 0 and not is_white:\n",
    "        periods.append({\"value\": (start, i)})\n",
    "        is_white = True\n",
    "periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b18e1b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > 0 and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j == 0 and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "getBasePeriods(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b5821f89",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > 0 and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j == 0 and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "82eaac32",
   "metadata": {},
   "outputs": [],
   "source": [
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ef6e8337",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "5d1cc736",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 10\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "5de5d4bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "b07077b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "959909d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 5\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "66c80069",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "8e8ca77a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "01b1e4ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "82acf6a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    row_colors\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "base_periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "2c21987d",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "6a181ca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "94ccb0e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "18c913c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "7c8b7441",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 10\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "0e4533c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "80068999",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "58f0f9f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    \n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        elif j <= WHITE_THRESHOLD and not is_white:\n",
    "            periods.append({\"value\": (start, i)})\n",
    "            is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d795d293",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 2\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                periods.append({\"value\": (start, i)})\n",
    "                is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "9f8f2fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                periods.append({\"value\": (start, i)})\n",
    "                is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "061e17a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                periods.append({\"value\": (start, i)})\n",
    "                is_white = True\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "bf3add21",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start > 1:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "fc3eb679",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start > 2:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "4e076986",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "WHITE_THRESHOLD = 0\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j > WHITE_THRESHOLD:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start > 3:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "4234f7d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "MIN_PERIOD_HEIGHT = 3\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "b9c5952a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "aa98ef06",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是噪音\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 3\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "0d3f0b92",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是噪音\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 4\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "bd62bcce",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 5\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "6873c175",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 6\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 5\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "61fd5743",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 8\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 5\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "8a3adf76",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 3\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 8\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "10e57cee",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 8\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "f880d6e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "269b593a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0), str(y0 - ly1))\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "a6b28409",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0), str(y0 - ly1), font=ImageFont(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20))\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "5654700b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0), str(y0 - ly1), font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20))\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9d55b551",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0), fill='magenta', str(y0 - ly1), font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20))\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "8ed7ef9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta',)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "d7874fdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "da3cb1f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-20),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "8f1e7639",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-80),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "cf151bb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-60),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7c136008",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-50),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "e140e7af",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((-30, y0-50),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "5b6281d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-50),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "3acc16ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-50),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((0, y0, w, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "73da3de9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-50),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "5ff0e323",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-40),  str(y0 - ly1), \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "a796e917",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-40),  f'{y0 - ly1}↑', \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/Supplemental/Zapfino.ttf', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "1dcfc7fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-40),  f'{y0 - ly1}↑', \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/PingFang.ttc', size=20),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "86cff9aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((5, y0-20),  f'{y0 - ly1}↑', \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "7cbac154",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-20),  f'{y0 - ly1}↑', \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "ef0db234",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "    \n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    # [i, j)\n",
    "    for i, j in enumerate(row_colors):\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW:\n",
    "#             空白结束，内容开始\n",
    "            if is_white:\n",
    "                start = i\n",
    "                is_white = False\n",
    "#                 内容继续\n",
    "            else:\n",
    "                pass\n",
    "        else:\n",
    "                # 空白继续\n",
    "            if is_white:\n",
    "                pass\n",
    "#             内容结束，空白开始\n",
    "            else:\n",
    "                is_white = True\n",
    "                if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                    if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                        periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                    else:\n",
    "                        periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "base_periods = getBasePeriods(img)\n",
    "# base_periods\n",
    "ly0, ly1 = 0, 0\n",
    "for period in base_periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑', \n",
    "              font=ImageFont.truetype(font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "             fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w-MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "aadcf476",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "from PIL import Image, ImageDraw, ImageFont\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "from typing import TypedDict, List, Tuple\n",
    "from enum import Enum\n",
    "\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "\n",
    "class BasePeriod(TypedDict):\n",
    "    # [i, j)\n",
    "    value: Tuple[int]\n",
    "\n",
    "\n",
    "class Period(BasePeriod):\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "c951841b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: 白色， 1: 其他颜色\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    def handle_row(row): return row.sum(axis=0)\n",
    "    row_colors = np.apply_along_axis(handle_row, 1, data)\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "f94671dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "55269f14",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 10\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "0e423b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ca1cdfad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 8\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "a97f3c7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "\n",
    "ly0, ly1 = 0, 0\n",
    "for period in getBasePeriods(img):\n",
    "    y0, y1 = period['value']\n",
    "    draw.text((0, y0-30),  f'{y0 - ly1}↑',\n",
    "              font=ImageFont.truetype(\n",
    "                  font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "              fill='magenta', stroke_width=1)\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "    ly0, ly1 = y0, y1\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "9c246872",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_PERIODS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_PERIODS = True\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "periods = getBasePeriods(img)\n",
    "\n",
    "for period in periods:\n",
    "    draw.rectangle((MARGIN_LEFT_PCT*w, y0, w -\n",
    "                   MARGIN_LEFT_PCT*w*2, y1), outline='red')\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_PERIODS:\n",
    "    for p1, p2 in zip(periods[:-1], periods[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "6183c30b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_PERIODS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_PERIODS = True\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "periods = getBasePeriods(img)\n",
    "\n",
    "for period in periods:\n",
    "    draw.rectangle(\n",
    "        (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "        outline='red'\n",
    "    )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_PERIODS:\n",
    "    for p1, p2 in zip(periods[:-1], periods[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "604c527f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_PERIODS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_PERIODS = True\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "periods = getBasePeriods(img)\n",
    "\n",
    "for period in periods:\n",
    "    y0, y1 = p2['value']\n",
    "    draw.rectangle(\n",
    "        (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "        outline='red'\n",
    "    )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_PERIODS:\n",
    "    for p1, p2 in zip(periods[:-1], periods[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "39f55fe1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_PERIODS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_PERIODS = True\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "periods = getBasePeriods(img)\n",
    "\n",
    "for period in periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle(\n",
    "        (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "        outline='red'\n",
    "    )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_PERIODS:\n",
    "    for p1, p2 in zip(periods[:-1], periods[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "f3d13e6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_PERIOD_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_PERIODS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_PERIODS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_PERIODS = False\n",
    "\n",
    "\n",
    "def getBasePeriods(img) -> List[BasePeriod]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    periods: List[BasePeriod] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_PERIOD_HEIGHT:\n",
    "                if periods and start - periods[-1]['value'][1] < MIN_HEIGHT_BETWEEN_PERIODS:\n",
    "                    periods[-1]['value'] = (periods[-1]['value'][0], i)\n",
    "                else:\n",
    "                    periods.append({\"value\": (start, i)})\n",
    "    return periods\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "periods = getBasePeriods(img)\n",
    "\n",
    "for period in periods:\n",
    "    y0, y1 = period['value']\n",
    "    draw.rectangle(\n",
    "        (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "        outline='red'\n",
    "    )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_PERIODS:\n",
    "    for p1, p2 in zip(periods[:-1], periods[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "ad292113",
   "metadata": {},
   "outputs": [],
   "source": [
    "from enum import Enum\n",
    "from typing import TypedDict, List, Tuple\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image, ImageDraw, ImageFont\n",
    "%matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "\n",
    "plt.rcParams['figure.dpi'] = 300\n",
    "\n",
    "\n",
    "class HeadType(int, Enum):\n",
    "    PROBLEM = 0\n",
    "    TITLE = 1\n",
    "    OTHERS = 2\n",
    "\n",
    "\n",
    "class BaseBlock(TypedDict):\n",
    "    # [i, j)\n",
    "    value: Tuple[int]\n",
    "\n",
    "\n",
    "class Block(BaseBlock):\n",
    "    head: HeadType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "50a03a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_BLOCK_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_BLOCKS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_BLOCKS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_HEIGHT_BETWEEN_BLOCKS = False\n",
    "\n",
    "\n",
    "def getBaseBlocks(img) -> List[BaseBlock]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    blocks: List[BaseBlock] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_BLOCK_HEIGHT:\n",
    "                if blocks and start - blocks[-1]['value'][1] < MIN_HEIGHT_BETWEEN_BLOCKS:\n",
    "                    blocks[-1]['value'] = (blocks[-1]['value'][0], i)\n",
    "                else:\n",
    "                    blocks.append({\"value\": (start, i)})\n",
    "    return blocks\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "blocks = getBaseBlocks(img)\n",
    "\n",
    "for block in blocks:\n",
    "    y0, y1 = block['value']\n",
    "    draw.rectangle(\n",
    "        (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "        outline='red'\n",
    "    )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_BLOCKS:\n",
    "    for p1, p2 in zip(blocks[:-1], blocks[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "cb76977f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_BLOCK_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_BLOCKS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_BLOCKS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "DRAW_BLOCK_CONTUOUR = True\n",
    "DRAW_HEIGHT_BETWEEN_BLOCKS = False\n",
    "\n",
    "\n",
    "def getBaseBlocks(img) -> List[BaseBlock]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    row_colors = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert row_colors.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(row_colors.shape)\n",
    "\n",
    "    blocks: List[BaseBlock] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(row_colors):\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_BLOCK_HEIGHT:\n",
    "                if blocks and start - blocks[-1]['value'][1] < MIN_HEIGHT_BETWEEN_BLOCKS:\n",
    "                    blocks[-1]['value'] = (blocks[-1]['value'][0], i)\n",
    "                else:\n",
    "                    blocks.append({\"value\": (start, i)})\n",
    "    return blocks\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "blocks = getBaseBlocks(img)\n",
    "\n",
    "if DRAW_BLOCK_CONTUOUR:\n",
    "    for block in blocks:\n",
    "        y0, y1 = block['value']\n",
    "        draw.rectangle(\n",
    "            (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "            outline='red'\n",
    "        )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_BLOCKS:\n",
    "    for p1, p2 in zip(blocks[:-1], blocks[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "d4d4288d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_BLOCK_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_BLOCKS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_BLOCKS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 控制矩形框中内容的左右间距，适用于绘图\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "TOP_PCT = .05\n",
    "BOTTOM_PCT = .95\n",
    "\n",
    "DRAW_BLOCK_CONTUOUR = True\n",
    "DRAW_HEIGHT_BETWEEN_BLOCKS = False\n",
    "\n",
    "\n",
    "def getBaseBlocks(img) -> List[BaseBlock]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    rows = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert rows.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(rows.shape)\n",
    "\n",
    "    blocks: List[BaseBlock] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(rows):\n",
    "        if i < TOP_PCT * h or i > BOTTOM_PCT * h:\n",
    "            continue\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_BLOCK_HEIGHT:\n",
    "                if blocks and start - blocks[-1]['value'][1] < MIN_HEIGHT_BETWEEN_BLOCKS:\n",
    "                    blocks[-1]['value'] = (blocks[-1]['value'][0], i)\n",
    "                else:\n",
    "                    blocks.append({\"value\": (start, i)})\n",
    "    return blocks\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "blocks = getBaseBlocks(img)\n",
    "\n",
    "if DRAW_BLOCK_CONTUOUR:\n",
    "    for block in blocks:\n",
    "        y0, y1 = block['value']\n",
    "        draw.rectangle(\n",
    "            (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "            outline='red'\n",
    "        )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_BLOCKS:\n",
    "    for p1, p2 in zip(blocks[:-1], blocks[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f266e334",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一个区块的最小高度，低于这个高度的可能是有噪点的空白行\n",
    "MIN_BLOCK_HEIGHT = 5\n",
    "\n",
    "# 判定两个区块之间的最小高度差，低于则合并\n",
    "# 经过验证，无法通过区块之间的高度差区分大题与小题 :(\n",
    "MIN_HEIGHT_BETWEEN_BLOCKS = 9\n",
    "assert MIN_HEIGHT_BETWEEN_BLOCKS >= 9, '再低就不能把一些分子分母粘合一起了'\n",
    "\n",
    "# 判断一行是否非空白行的最小有效点数\n",
    "MIN_NON_WHITE_POINTS_IN_ROW = 1\n",
    "\n",
    "# 保证block的框选是最佳视觉比例\n",
    "MARGIN_LEFT_PCT = .03\n",
    "\n",
    "# 去除页面上下部分的空白\n",
    "TOP_PCT = .05\n",
    "BOTTOM_PCT = .95\n",
    "\n",
    "DRAW_BLOCK_CONTUOUR = True\n",
    "DRAW_HEIGHT_BETWEEN_BLOCKS = False\n",
    "\n",
    "\n",
    "def getBaseBlocks(img) -> List[BaseBlock]:\n",
    "    # 0: white, 1: others\n",
    "    data = 1 - np.array(img.convert('1'))\n",
    "    rows = np.apply_along_axis(lambda row: row.sum(axis=0), 1, data)\n",
    "    assert rows.shape[0] == h, '对每一行进行二值化累计，因此高度保持不变'\n",
    "    # print(rows.shape)\n",
    "\n",
    "    blocks: List[BaseBlock] = []\n",
    "    start = 0\n",
    "    is_white = True\n",
    "    for i, j in enumerate(rows):\n",
    "        if i < TOP_PCT * h or i > BOTTOM_PCT * h:\n",
    "            continue\n",
    "        # 空白结束，内容开始\n",
    "        if j >= MIN_NON_WHITE_POINTS_IN_ROW and is_white:\n",
    "            start = i\n",
    "            is_white = False\n",
    "        # 内容结束，空白开始\n",
    "        elif j < MIN_NON_WHITE_POINTS_IN_ROW and not is_white:\n",
    "            is_white = True\n",
    "            if i - start >= MIN_BLOCK_HEIGHT:\n",
    "                if blocks and start - blocks[-1]['value'][1] < MIN_HEIGHT_BETWEEN_BLOCKS:\n",
    "                    blocks[-1]['value'] = (blocks[-1]['value'][0], i)\n",
    "                else:\n",
    "                    blocks.append({\"value\": (start, i)})\n",
    "    return blocks\n",
    "\n",
    "\n",
    "img_path = '../data/images/7.jpg'\n",
    "img = Image.open(img_path)\n",
    "draw = ImageDraw.Draw(img)\n",
    "w, h = img.size\n",
    "blocks = getBaseBlocks(img)\n",
    "\n",
    "if DRAW_BLOCK_CONTUOUR:\n",
    "    for block in blocks:\n",
    "        y0, y1 = block['value']\n",
    "        draw.rectangle(\n",
    "            (MARGIN_LEFT_PCT*w, y0, w - MARGIN_LEFT_PCT*w*2, y1),\n",
    "            outline='red'\n",
    "        )\n",
    "\n",
    "if DRAW_HEIGHT_BETWEEN_BLOCKS:\n",
    "    for p1, p2 in zip(blocks[:-1], blocks[1:]):\n",
    "        y0, y1 = p2['value']\n",
    "        ly0, ly1 = p1['value']\n",
    "        draw.text(\n",
    "            (0, y0-30),  f'{y0 - ly1}↑',\n",
    "            font=ImageFont.truetype(\n",
    "                font='/System/Library/Fonts/PingFang.ttc', size=30),\n",
    "            fill='magenta', stroke_width=1\n",
    "        )\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "0ba741fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = np.array(img)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "bea185d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = np.array(img)\n",
    "255 - data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "9194c7f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "3b357d31",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = 255 - np.array(img)\n",
    "\n",
    "def handle_col(col):\n",
    "    return np.mean(col)\n",
    "\n",
    "np.apply_along_axis(handle_col, 1, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "ee264d33",
   "metadata": {},
   "outputs": [],
   "source": [
    "_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "208072aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = 255 - np.array(img)\n",
    "\n",
    "def handle_col(col):\n",
    "    return np.mean(col)\n",
    "\n",
    "np.apply_along_axis(handle_col, 2, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "f279714f",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = 255 - np.array(img)\n",
    "\n",
    "def handle_col(col):\n",
    "    return np.mean(col)\n",
    "\n",
    "np.apply_along_axis(handle_col, 0, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "6659ebf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "993a8808",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = Image.open(img_path)\n",
    "data = 255 - np.array(img)\n",
    "\n",
    "def handle_col(col):\n",
    "    return np.mean(col)\n",
    "\n",
    "cols = np.apply_along_axis(handle_col, 0, data)\n",
    "for i, col in enumerate(cols):\n",
    "    print(i, col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "a550009b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "6d06170c",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "998c374e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib widget\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "087cf44c",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "38ddfa1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "plt.imshow(np.array(img))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "a05dda37",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "plt.rcParams['figure.dpi'] = 100\n",
    "\n",
    "plt.imshow(np.array(img))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "9a9f479e",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "860a4d00",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(cols)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "ec47c50d",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(cols[0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "ab47fe4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "plt.hist(cols[0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "fe763fd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "plt.hist(cols)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "0e5c320f",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "plt.hist(data)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
